<?php

/**
 * Web Controller abstract class.
 */
abstract class AB_Controller
{
    /**
     * Reflection object for reverse-engineering of child controller classes.
     * @var ReflectionClass
     */
    protected $reflection = null;

    /**
     * User created variables
     * @var array
     */
    private $vars = array();

    /**
     * Copy of global _POST array.
     * @var array
     */
    protected $_post = array();

    /**
     * Copy of global _GET array.
     * @var array
     */
    protected $_get = array();

    /**
     * Copy of global _FILES array.
     * @var array
     */
    protected $_files = array();


    // Public methods.

    /**
     * Constructor.
     */
    public function __construct()
    {
        $this->reflection = new ReflectionClass($this);
        $this->_post      = $_POST;
        $this->_get       = $_GET;
        $this->_files     = $_FILES;

        $this->vars['current_url'] = 'http://' . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"];

        $this->registerWpActions();
    }

    /**
     * Set template variable.
     *
     * @param string $name
     * @param string $value
     */
    public function __set($name, $value) {
        $this->vars[$name] = $value;
    }

    /**
     * Checks whether variable exists.
     *
     * @param string $name
     * @return boolean
     */
    public function __isset( $name ) {
        return isset ( $this->vars[ $name ] );
    }

    /**
     * Get template variable.
     *
     * @param string $name
     * @return mixed
     */
    public function __get($name) {
        if (array_key_exists($name, $this->vars)) {
            return $this->vars[$name];
        }

        $trace = debug_backtrace();
        trigger_error(
            sprintf(
                'Undefined property via __get(): %s in %s on line %s',
                $name,
                $trace[0]['file'],
                $trace[0]['line']
            ),
            E_USER_NOTICE
        );

        return null;
    }

    // Protected methods.

    /**
     * Get path to directory of current module.
     *
     * @return string
     */
    protected function getModuleDirectory() {
        return dirname($this->reflection->getFileName());
    }

    /**
     * Register WP actions with add_action() function
     * based on public 'execute*' methods of child controller class.
     *
     * @param string $prefix Prefix for autogenerated add_action() $tag parameter
     */
    protected function registerWpActions( $prefix = '' ) {
        foreach ( $this->reflection->getMethods( ReflectionMethod::IS_PUBLIC ) as $method ) {
            if ( preg_match( '/^execute(.*)/', $method->name, $match ) ) {
                add_action(
                    $prefix . strtolower( preg_replace( '/([a-z])([A-Z])/', '$1_$2', $match[ 1 ] ) ),
                    array( $this, $match[ 0 ] )
                );
            }
        }
    }

    /**
     * Render a template file.
     *
     * @param $template
     * @param array $variables
     * @param bool $render
     * @return string
     * @throws Exception
     */
    protected function render($template, $variables = array(), $render = true) {
        extract($this->vars);
        extract($variables);

        // render
        ob_start();
        ob_implicit_flush(0);

        try {
            include $this->getModuleDirectory() . '/templates/' . $template . '.php';
        } catch (Exception $e) {
            ob_end_clean();
            throw $e;
        }

        if ( $render ) {
            echo ob_get_clean();
        } else {
            return ob_get_clean();
        }
    }

    protected function addJavascript() {

    }

    protected function getPost() {
        return $this->_post;
    }

    /**
     * @return array
     */
    protected  function getFiles() {
        return $this->_files;
    }

    /**
     * @return array
     */
    protected  function getParameters() {
        return array_merge($this->_get, $this->_post);
    }

    /**
     * @param $name
     * @param null $default
     * @return mixed
     */
    protected function getParameter( $name, $default = null ) {
        if ( isset($this->_get[ $name ]) ) {
            return $this->_get[ $name ];
        } else if ( isset($this->_post[ $name ]) ) {
            return $this->_post[ $name ];
        } else {
            return $default;
        }
    }

    /**
     * @return wpdb
     */
    protected function getWpdb() {
        global $wpdb;

        return $wpdb;
    }
}